// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TournamentType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  SWISS
  FREE_FOR_ALL
}

enum TournamentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ScoringSystem {
  CLASSIC
  CHESS
  TWO_POINT
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  tournaments Tournament[]
}

model Tournament {
  id                Int              @id @default(autoincrement())
  name              String
  type              TournamentType
  scoringSystem     ScoringSystem
  status            TournamentStatus @default(PENDING)
  createdAt         DateTime         @default(now())
  creator           User             @relation(fields: [creatorId], references: [id])
  creatorId         Int
  totalParticipants Int

  participants      Participant[]
  rounds            Round[]
  matches           Match[]
}

model Participant {
  id           Int               @id @default(autoincrement())
  name         String
  score        Float             @default(0)
  tournament   Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int

  matchEntries MatchParticipant[]
  wonMatches   Match[]           @relation("MatchWinner")
}

model Round {
  id           Int         @id @default(autoincrement())
  number       Int
  tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int

  matches      Match[]
}

model Match {
  id           Int                @id @default(autoincrement())
  tournament   Tournament         @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int
  round        Round?             @relation(fields: [roundId], references: [id])
  roundId      Int?
  date         DateTime?

  matchParticipants MatchParticipant[]

  winnerId     Int?
  winner       Participant?       @relation("MatchWinner", fields: [winnerId], references: [id])
}

model MatchParticipant {
  id            Int          @id @default(autoincrement())

  match         Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId       Int
  participant   Participant  @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId Int

  score         Float?
  isWinner      Boolean?
}
